.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor UserData
;; push identifier farmPool
GETGLOB 12
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 101
ACCEPT
; end constructor UserData
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_reserve_internal
.type	_reserve_internal, @function
CALL $_reserve_internal_macro$

.macro _reserve_internal_macro
; function _reserve
;; return
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 100000000
MAX
; end function _reserve

.macro getDetails
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getDetails
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier amount
GETGLOB 10
;; push identifier rewardDebt
GETGLOB 11
;; push identifier farmPool
GETGLOB 12
;; push identifier user
GETGLOB 13
TUPLE 4
; end function getDetails
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xe83b4671
	PUSH S2
	UNTUPLE 4
	BLKSWAP 1, 4
	PUSH S4
	STUR 256
	PUSH S3
	STUR 256
	PUSH S2
	STSLICER
	NEWC
	PUSH S2
	STSLICER
	BLKDROP2 4, 2
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNTUPLE 4
	BLKSWAP 1, 4
	PUSH S4
	STUR 256
	PUSH S3
	STUR 256
	PUSH S2
	STSLICER
	NEWC
	PUSH S2
	STSLICER
	BLKDROP2 4, 2
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro processDeposit
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode nonce
LDU 64
; Decode _amount
LDU 256
; Decode _accTonPerShare
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: nonce
;; param: _amount
;; param: _accTonPerShare
; function processDeposit
;; get member sender
GETGLOB 9
;; push identifier farmPool
GETGLOB 12
SDEQ
THROWIFNOT 101
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
;; push identifier amount
GETGLOB 10
;; decl: prevAmount
;; push identifier rewardDebt
GETGLOB 11
;; decl: prevRewardDebt
;; push identifier _amount
PUSH S3
; expValue
;; fetch amount
GETGLOB 10
; end expValue
SWAP
ADD
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier amount
GETGLOB 10
;; *
;; push identifier _accTonPerShare
PUSH S3
MUL
;; /
PUSHINT 1000000000000000000
DIV
; colValue
SETGLOB 11
; end colValue
;; Remote call ITonFarmPool.finishDeposit
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x022cb1c4
;; _nonce
;; push identifier nonce
PUSH S6
STUR 64
;; prevAmount
;; push identifier prevAmount
PUSH S3
STUR 256
;; prevRewardDebt
;; push identifier prevRewardDebt
PUSH S2
STUR 256
;; accTonPerShare
;; push identifier _accTonPerShare
PUSH S4
STUR 256
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP2
; end function processDeposit
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro processWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _amount
LDU 256
; Decode _accTonPerShare
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: _amount
;; param: _accTonPerShare
;; param: send_gas_to
; function processWithdraw
PUSHCONT {
	;; get member sender
	GETGLOB 9
	;; push identifier farmPool
	GETGLOB 12
	SDEQ
	THROWIFNOT 101
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	PUSHINT 2
	RAWRESERVE
	;; if
	;; push identifier _amount
	PUSH S2
	;; >
	;; push identifier amount
	GETGLOB 10
	GREATER
	PUSHCONT {
		;; transfer()
		;; push identifier send_gas_to
		DUP
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
		;; return
		RET
	}
	IFJMP
	;; end if
	;; push identifier amount
	GETGLOB 10
	;; decl: prevAmount
	;; push identifier rewardDebt
	GETGLOB 11
	;; decl: prevRewardDebt
	;; push identifier _amount
	PUSH S4
	; expValue
	;; fetch amount
	GETGLOB 10
	; end expValue
	SWAP
	SUB
	UFITS 256
	; colValue
	SETGLOB 10
	; end colValue
	; expValue
	; end expValue
	;; push identifier amount
	GETGLOB 10
	;; *
	;; push identifier _accTonPerShare
	PUSH S4
	MUL
	;; /
	PUSHINT 1000000000000000000
	DIV
	; colValue
	SETGLOB 11
	; end colValue
	;; Remote call ITonFarmPool.finishWithdraw
	;; get member sender
	GETGLOB 9
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x11f040ee
	;; user
	;; push identifier user
	GETGLOB 13
	STSLICER
	;; prevAmount
	;; push identifier prevAmount
	PUSH S3
	STUR 256
	;; prevRewardDebt
	;; push identifier prevRewardDebt
	PUSH S2
	STUR 256
	NEWC
	;; withdrawAmount
	;; push identifier _amount
	PUSH S7
	STUR 256
	;; accTonPerShare
	;; push identifier _accTonPerShare
	PUSH S6
	STUR 256
	;; send_gas_to
	;; push identifier send_gas_to
	PUSH S5
	STSLICER
	STBREFR
	STBREFR
	ENDC
	PUSHINT 128
	SENDRAWMSG
	DROP2
}
CALLX
; end function processWithdraw
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro processWithdrawAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _accTonPerShare
LDU 256
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: _accTonPerShare
;; param: send_gas_to
; function processWithdrawAll
PUSHCONT {
	;; get member sender
	GETGLOB 9
	;; push identifier farmPool
	GETGLOB 12
	SDEQ
	THROWIFNOT 101
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	PUSHINT 2
	RAWRESERVE
	;; if
	;; push identifier amount
	GETGLOB 10
	PUSHCONT {
		;; transfer()
		;; push identifier send_gas_to
		DUP
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
		;; return
		RET
	}
	IFNOTJMP
	;; end if
	;; push identifier amount
	GETGLOB 10
	;; decl: prevAmount
	;; push identifier rewardDebt
	GETGLOB 11
	;; decl: prevRewardDebt
	; expValue
	; end expValue
	PUSHINT 0
	; colValue
	SETGLOB 10
	; end colValue
	; expValue
	; end expValue
	PUSHINT 0
	; colValue
	SETGLOB 11
	; end colValue
	;; Remote call ITonFarmPool.finishWithdrawAll
	;; get member sender
	GETGLOB 9
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x167cdaf5
	;; user
	;; push identifier user
	GETGLOB 13
	STSLICER
	;; _prevAmount
	;; push identifier prevAmount
	PUSH S3
	STUR 256
	;; _prevRewardDebt
	;; push identifier prevRewardDebt
	PUSH S2
	STUR 256
	NEWC
	;; _accTonPerShare
	;; push identifier _accTonPerShare
	PUSH S6
	STUR 256
	;; send_gas_to
	;; push identifier send_gas_to
	PUSH S5
	STSLICER
	STBREFR
	STBREFR
	ENDC
	PUSHINT 128
	SENDRAWMSG
	DROP2
}
CALLX
; end function processWithdrawAll
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro processSafeWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode send_gas_to
LDMSGADDR
ENDS
;; param: send_gas_to
; function processSafeWithdraw
;; get member sender
GETGLOB 9
;; push identifier farmPool
GETGLOB 12
SDEQ
THROWIFNOT 101
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
;; push identifier amount
GETGLOB 10
;; decl: prevAmount
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 11
; end colValue
;; Remote call ITonFarmPool.finishSafeWithdraw
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x70d5aeab
;; user
;; push identifier user
GETGLOB 13
STSLICER
;; amount
;; push identifier prevAmount
PUSH S2
STUR 256
;; send_gas_to
;; push identifier send_gas_to
PUSH S3
STSLICER
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function processSafeWithdraw
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 12
GETGLOB 13
XCHG s2
STSLICE
STSLICE
GETGLOB 10
GETGLOB 11
REVERSE 4, 0
STBREF
STU 256
STU 256
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
SETGLOB 13
SETGLOB 12
LDU 256
PLDU 256
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	SETGLOB 13
	SETGLOB 12
	LDU 256
	PLDU 256
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init amount
	PUSHINT 0
	SETGLOB 10
	; init rewardDebt
	PUSHINT 0
	SETGLOB 11
	; init farmPool
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 12
	; init user
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 13
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro amount
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xfad46b66
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro rewardDebt
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xbb06655a
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro farmPool
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x8d1498e9
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro user
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x8790af68
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 546186255
LEQ
PUSHCONT {
	DUP
	PUSHINT 126922600
	EQUAL
	IFJMPREF {
		CALL $user$
	}
	DUP
	PUSHINT 219453673
	EQUAL
	IFJMPREF {
		CALL $farmPool$
	}
	DUP
	PUSHINT 546186255
	EQUAL
	IFJMPREF {
		CALL $processWithdrawAll$
	}
}
IFJMP
DUP
PUSHINT 1115286010
LEQ
PUSHCONT {
	DUP
	PUSHINT 990274906
	EQUAL
	IFJMPREF {
		CALL $rewardDebt$
	}
	DUP
	PUSHINT 1003259743
	EQUAL
	IFJMPREF {
		CALL $processDeposit$
	}
	DUP
	PUSHINT 1115286010
	EQUAL
	IFJMPREF {
		CALL $processSafeWithdraw$
	}
}
IFJMP
DUP
PUSHINT 1756716863
LEQ
PUSHCONT {
	DUP
	PUSHINT 1416625695
	EQUAL
	IFJMPREF {
		CALL $processWithdraw$
	}
	DUP
	PUSHINT 1748715121
	EQUAL
	IFJMPREF {
		CALL $getDetails$
	}
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
}
IFJMP
DUP
PUSHINT 2060741478
EQUAL
IFJMPREF {
	CALL $amount$
}
