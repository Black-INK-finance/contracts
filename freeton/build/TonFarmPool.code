.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode _owner
LDMSGADDR
; Decode _rewardPerSecond
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _minDeposit
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _farmStartTime
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _farmEndTime
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _lpTokenRoot
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: _owner
;; param: _rewardPerSecond
;; param: _minDeposit
;; param: _farmStartTime
;; param: _farmEndTime
;; param: _lpTokenRoot
; constructor TonFarmPool
GETGLOB 2
;; ==
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
EQUAL
THROWIFNOT 100
;; push identifier _farmStartTime
PUSH S2
;; <
;; push identifier _farmEndTime
PUSH S2
LESS
THROWIFNOT 110
ACCEPT
; expValue
; end expValue
;; push identifier _rewardPerSecond
PUSH S4
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier _minDeposit
PUSH S3
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier _farmStartTime
PUSH S2
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier _farmEndTime
PUSH S1
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
;; push identifier _lpTokenRoot
DUP
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
;; push identifier _owner
PUSH S5
; colValue
SETGLOB 19
; end colValue
CALLREF {
	CALL $setUpTokenWallet_internal_macro$
}
; end constructor TonFarmPool
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setUpTokenWallet_internal
.type	setUpTokenWallet_internal, @function
CALL $setUpTokenWallet_internal_macro$

.macro setUpTokenWallet_internal_macro
; function setUpTokenWallet
;; Remote call IRootTokenContract.deployEmptyWallet
;; push identifier lpTokenRoot
GETGLOB 15
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x542b1672
;; deploy_grams
PUSHINT 1000000000
;; /
PUSHINT 2
DIV
STUR 128
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
MYADDR
STSLICER
;; gas_back_address
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IRootTokenContract.getWalletAddress
;; push identifier lpTokenRoot
GETGLOB 15
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x41dcd6500000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x069a08f8
STSLICECONST x50bfca9f
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function setUpTokenWallet

.macro receiveTokenWalletAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode wallet
LDMSGADDR
ENDS
;; param: wallet
; function receiveTokenWalletAddress
;; get member sender
GETGLOB 9
;; push identifier lpTokenRoot
GETGLOB 15
SDEQ
THROWIFNOT 102
; expValue
; end expValue
;; push identifier wallet
DUP
; colValue
SETGLOB 16
; end colValue
;; Remote call ITONTokenWallet.setReceiveCallback
;; push identifier wallet
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x402faf080000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x71eee875
;; receive_callback
MYADDR
STSLICER
;; allow_non_notifiable
FALSE
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function receiveTokenWalletAddress
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro tokensReceivedCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode token_wallet
LDMSGADDR
; Decode token_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode sender_public_key
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode sender_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode sender_wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode original_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode updated_balance
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode payload
;; decode TvmCell
LDREF
ENDS
;; param: token_wallet
;; param: token_root
;; param: amount
;; param: sender_public_key
;; param: sender_address
;; param: sender_wallet
;; param: original_gas_to
;; param: updated_balance
;; param: payload
; function tokensReceivedCallback
PUSHCONT {
	;; get member sender
	GETGLOB 9
	;; push identifier lpTokenWallet
	GETGLOB 16
	SDEQ
	THROWIFNOT 103
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	;; >=
	PUSHINT 500000000
	GEQ
	THROWIFNOT 104
	;; get member balance
	GETPARAM 7
	INDEX 0
	;; -
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	SUB
	UFITS 128
	PUSHINT 2
	RAWRESERVE
	;; if
	;; get member value
	;; push identifier sender_address
	PUSH S4
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier amount
		PUSH S6
		;; <
		;; push identifier minDeposit
		GETGLOB 18
		LESS
	}
	IFNOT
	PUSHCONT {
		NEWC
		ENDC
		;; decl: tvmcell
		;; Remote call ITONTokenWallet.transfer
		;; push identifier lpTokenWallet
		GETGLOB 16
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 1
		NEWC
		STSLICECONST x4bf160e2
		;; to
		;; push identifier sender_wallet
		PUSH S6
		STSLICER
		;; tokens
		;; push identifier amount
		PUSH S9
		STUR 128
		;; grams
		PUSHINT 0
		STUR 128
		;; send_gas_to
		;; push identifier original_gas_to
		PUSH S5
		STSLICER
		;; notify_receiver
		FALSE
		STIR 1
		;; payload
		;; push identifier tvmcell
		PUSH S2
		STREFR
		STBREFR
		ENDC
		PUSHINT 128
		SENDRAWMSG
		;; return
		DROP
		RET
	}
	IFJMP
	;; end if
	CALLREF {
		CALL $updatePoolInfo_internal_macro$
	}
	PUSHINT 1
	; expValue
	;; fetch deposit_nonce
	GETGLOB 20
	; end expValue
	SWAP
	ADD
	UFITS 64
	; colValue
	SETGLOB 20
	; end colValue
	;; push identifier sender_address
	PUSH S4
	;; push identifier amount
	PUSH S7
	;; push identifier original_gas_to
	PUSH S4
	TUPLE 3
	; expValue
	;; fetch deposits
	GETGLOB 21
	;; push identifier deposit_nonce
	GETGLOB 20
	SWAP
	; end expValue
	ROT
	; colValue
	UNTUPLE 3
	NEWC
	PUSH S3
	STSLICER
	PUSH S2
	STUR 128
	PUSH S1
	STSLICER
	BLKDROP2 3, 1
	ROTREV
	PUSHINT 128
	DICTUSETB
	SETGLOB 21
	; end colValue
	;; push identifier sender_address
	PUSH S4
	CALLREF {
		CALL $getUserDataAddress_internal_macro$
	}
	;; decl: userDataAddr
	;; Remote call UserData.processDeposit
	;; push identifier userDataAddr
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x00dc78ea
	;; nonce
	;; push identifier deposit_nonce
	GETGLOB 20
	STUR 64
	;; _amount
	;; push identifier amount
	PUSH S8
	STUR 128
	;; _accTonPerShare
	;; push identifier accTonPerShare
	GETGLOB 12
	STUR 128
	ENDC
	PUSHINT 128
	SENDRAWMSG
	DROP
}
CALLX
; end function tokensReceivedCallback
BLKDROP 9
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finishDeposit
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _deposit_nonce
LDU 64
; Decode _prevAmount
LDU 128
; Decode _prevRewardDebt
LDU 128
; Decode _accTonPerShare
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: _deposit_nonce
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _accTonPerShare
; function finishDeposit
;; index
;; push identifier _deposit_nonce
PUSH S3
;; push identifier deposits
GETGLOB 21
PUSHINT 128
DICTUGET
PUSHCONT {
	LDMSGADDR
	LDU 128
	TUPLE 3
}
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	TUPLE 3
}
IFELSE
;; decl: deposit
;; get member user
;; push identifier deposit
DUP
INDEX 0
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
PUSHINT 0
;; decl: pending
;; if
;; push identifier _prevAmount
PUSH S5
GTINT 0
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier _prevAmount
	PUSH S5
	;; *
	;; push identifier _accTonPerShare
	PUSH S4
	MUL
	UFITS 128
	;; /
	PUSHINT 1000000000000000000
	DIV
	;; -
	;; push identifier _prevRewardDebt
	PUSH S5
	SUB
	UFITS 128
	; colValue
	NIP
	; end colValue
}
IF
;; end if
;; if
;; push identifier pending
DUP
;; +
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
ADD
UFITS 128
;; >
;; get member balance
GETPARAM 7
INDEX 0
GREATER
PUSHCONT {
	;; emit RewardDebt
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x6abd00c8
	;; user
	;; get member user
	;; push identifier deposit
	PUSH S3
	INDEX 0
	STSLICER
	;; amount
	;; push identifier pending
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
	; expValue
	; end expValue
	PUSHINT 0
	; colValue
	NIP
	; end colValue
}
IF
;; end if
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
;; -
;; push identifier pending
PUSH S1
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; get member amount
;; push identifier deposit
PUSH S2
INDEX 1
; expValue
;; fetch lpTokenBalance
GETGLOB 17
; end expValue
SWAP
ADD
UFITS 128
; colValue
SETGLOB 17
; end colValue
;; if
;; push identifier pending
DUP
GTINT 0
PUSHCONT {
	;; transfer()
	;; push identifier pending
	DUP
	;; get member user
	;; push identifier deposit
	PUSH S3
	INDEX 0
	NEWC
	STSLICECONST x42_
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 105
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
;; end if
;; delete
; expValue
;; fetch deposits
GETGLOB 21
;; push identifier _deposit_nonce
PUSH S7
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 128
DICTUDEL
DROP
; colValue
NIP
SETGLOB 21
; end colValue
;; emit Deposit
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x57f202d9
;; user
;; get member user
;; push identifier deposit
PUSH S3
INDEX 0
STSLICER
;; amount
;; get member amount
;; push identifier deposit
PUSH S3
INDEX 1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; transfer()
;; get member send_gas_to
;; push identifier deposit
PUSH S2
INDEX 2
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 3
; end function finishDeposit
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode amount
LDU 128
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: amount
;; param: send_gas_to
CALLREF {
	CALL $withdraw_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	withdraw_internal
.type	withdraw_internal, @function
CALL $withdraw_internal_macro$

.macro withdraw_internal_macro
;; param: amount
;; param: send_gas_to
; function withdraw
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; push identifier amount
PUSH S1
GTINT 0
THROWIFNOT 107
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 500000000
GEQ
THROWIFNOT 108
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
CALLREF {
	CALL $updatePoolInfo_internal_macro$
}
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: userDataAddr
;; Remote call UserData.processWithdraw
;; push identifier userDataAddr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1b1372d7
;; _amount
;; push identifier amount
PUSH S3
STUR 128
;; _accTonPerShare
;; push identifier accTonPerShare
GETGLOB 12
STUR 128
;; send_gas_to
;; push identifier send_gas_to
PUSH S2
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function withdraw
DROP2

.macro withdrawAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $withdrawAll_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	withdrawAll_internal
.type	withdrawAll_internal, @function
CALL $withdrawAll_internal_macro$

.macro withdrawAll_internal_macro
; function withdrawAll
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 500000000
GEQ
THROWIFNOT 108
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
CALLREF {
	CALL $updatePoolInfo_internal_macro$
}
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: userDataAddr
;; Remote call UserData.processWithdrawAll
;; push identifier userDataAddr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1ccadbb2
;; _accTonPerShare
;; push identifier accTonPerShare
GETGLOB 12
STUR 128
;; send_gas_to
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function withdrawAll

.macro finishWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user
LDMSGADDR
; Decode _prevAmount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _prevRewardDebt
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _withdrawAmount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _accTonPerShare
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: user
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _withdrawAmount
;; param: _accTonPerShare
;; param: send_gas_to
CALLREF {
	CALL $finishWithdraw_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	finishWithdraw_internal
.type	finishWithdraw_internal, @function
CALL $finishWithdraw_internal_macro$

.macro finishWithdraw_internal_macro
;; param: user
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _withdrawAmount
;; param: _accTonPerShare
;; param: send_gas_to
; function finishWithdraw
;; push identifier user
PUSH S5
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
;; push identifier _prevAmount
PUSH S5
;; *
;; push identifier _accTonPerShare
PUSH S3
MUL
UFITS 128
;; /
PUSHINT 1000000000000000000
DIV
;; -
;; push identifier _prevRewardDebt
PUSH S5
SUB
UFITS 128
;; decl: pending
;; if
;; push identifier pending
DUP
;; +
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
ADD
UFITS 128
;; >
;; get member balance
GETPARAM 7
INDEX 0
GREATER
PUSHCONT {
	;; emit RewardDebt
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x6abd00c8
	;; user
	;; push identifier user
	PUSH S8
	STSLICER
	;; amount
	;; push identifier pending
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
	; expValue
	; end expValue
	PUSHINT 0
	; colValue
	NIP
	; end colValue
}
IF
;; end if
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
;; -
;; push identifier pending
PUSH S1
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; push identifier _withdrawAmount
PUSH S4
; expValue
;; fetch lpTokenBalance
GETGLOB 17
; end expValue
SWAP
SUB
UFITS 128
; colValue
SETGLOB 17
; end colValue
;; if
;; push identifier pending
DUP
GTINT 0
PUSHCONT {
	;; transfer()
	;; push identifier pending
	DUP
	;; push identifier user
	PUSH S8
	NEWC
	STSLICECONST x42_
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 105
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
;; end if
NEWC
ENDC
;; decl: tvmcell
;; emit Withdraw
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x72da1156
;; user
;; push identifier user
PUSH S9
STSLICER
;; amount
;; push identifier _withdrawAmount
PUSH S6
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.transferToRecipient
;; push identifier lpTokenWallet
GETGLOB 16
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
PUSHINT 0
STUR 256
;; recipient_address
;; push identifier user
PUSH S10
STSLICER
;; tokens
;; push identifier _withdrawAmount
PUSH S7
STUR 128
;; deploy_grams
PUSHINT 0
STUR 128
;; transfer_grams
PUSHINT 0
STUR 128
NEWC
;; send_gas_to
;; push identifier send_gas_to
PUSH S6
STSLICER
;; notify_receiver
FALSE
STIR 1
;; payload
;; push identifier tvmcell
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 3
; end function finishWithdraw
BLKDROP 6

.macro finishWithdrawAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user
LDMSGADDR
; Decode _prevAmount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _prevRewardDebt
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _accTonPerShare
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: user
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _accTonPerShare
;; param: send_gas_to
; function finishWithdrawAll
;; push identifier user
PUSH S4
;; push identifier _prevAmount
PUSH S4
;; push identifier _prevRewardDebt
PUSH S4
;; push identifier _prevAmount
PUSH S6
;; push identifier _accTonPerShare
PUSH S5
;; push identifier send_gas_to
PUSH S5
CALLREF {
	CALL $finishWithdraw_internal_macro$
}
; end function finishWithdrawAll
BLKDROP 5
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdrawUnclaimed
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode to
LDMSGADDR
ENDS
;; param: to
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 19
SDEQ
THROWIFNOT 101
; function withdrawUnclaimed
;; push identifier now
NOW
;; >=
;; push identifier farmEndTime
GETGLOB 14
GEQ
THROWIFNOT 109
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; transfer()
;; push identifier to
DUP
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function withdrawUnclaimed
; end modifier onlyOwner
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro pendingReward
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user_amount
LDU 128
; Decode user_reward_debt
LDU 128
ENDS
;; param: user_amount
;; param: user_reward_debt
; function pendingReward
;; push identifier accTonPerShare
GETGLOB 12
;; decl: _accTonPerShare
;; if
;; push identifier now
NOW
;; >
;; push identifier lastRewardTime
GETGLOB 11
GREATER
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier lpTokenBalance
	GETGLOB 17
	NEQINT 0
}
IF
PUSHCONT {
	;; push identifier lastRewardTime
	GETGLOB 11
	;; push identifier now
	NOW
	CALLREF {
		CALL $getMultiplier_internal_macro$
	}
	;; decl: multiplier
	;; push identifier multiplier
	DUP
	;; *
	;; push identifier rewardPerSecond
	GETGLOB 10
	MUL
	UFITS 128
	;; decl: tonReward
	;; push identifier tonReward
	DUP
	;; *
	PUSHINT 1000000000000000000
	MUL
	UFITS 128
	;; /
	;; push identifier lpTokenBalance
	GETGLOB 17
	DIV
	; expValue
	PUSH S3
	; end expValue
	SWAP
	ADD
	UFITS 128
	; colValue
	POP S3
	; end colValue
	DROP2
}
IF
;; end if
;; return
;; push identifier user_amount
PUSH S2
;; *
;; push identifier _accTonPerShare
PUSH S1
MUL
UFITS 128
;; /
PUSHINT 1000000000000000000
DIV
;; -
;; push identifier user_reward_debt
PUSH S2
SUB
UFITS 128
NIP
; end function pendingReward
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbae2c17e
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getMultiplier
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode from
LDU 128
; Decode to
LDU 128
ENDS
;; param: from
;; param: to
CALLREF {
	CALL $getMultiplier_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd9b60f08
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMultiplier_internal
.type	getMultiplier_internal, @function
CALL $getMultiplier_internal_macro$

.macro getMultiplier_internal_macro
;; param: from
;; param: to
;; ret param: retParam@0
PUSHINT 0
; function getMultiplier
PUSHCONT {
	;; push identifier from
	PUSH S2
	;; <=
	;; push identifier to
	PUSH S2
	LEQ
	THROWIFNOT 110
	;; if
	;; push identifier from
	PUSH S2
	;; >
	;; push identifier farmEndTime
	GETGLOB 14
	GREATER
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier to
		PUSH S1
		;; <
		;; push identifier farmStartTime
		GETGLOB 13
		LESS
	}
	IFNOT
	PUSHCONT {
		;; return
		PUSHINT 0
		NIP
		RET
	}
	IFJMP
	;; end if
	;; if
	;; push identifier to
	PUSH S1
	;; >
	;; push identifier farmEndTime
	GETGLOB 14
	GREATER
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier farmEndTime
		GETGLOB 14
		; colValue
		POP S2
		; end colValue
	}
	IF
	;; end if
	;; if
	;; push identifier from
	PUSH S2
	;; <
	;; push identifier farmStartTime
	GETGLOB 13
	LESS
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier farmStartTime
		GETGLOB 13
		; colValue
		POP S3
		; end colValue
	}
	IF
	;; end if
	;; return
	;; push identifier to
	PUSH S1
	;; -
	;; push identifier from
	PUSH S3
	SUB
	UFITS 128
	NIP
}
CALLX
; end function getMultiplier
BLKDROP2 2, 1

.macro safeWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode send_gas_to
LDMSGADDR
ENDS
;; param: send_gas_to
; function safeWithdraw
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 500000000
GEQ
THROWIFNOT 108
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: user_data_addr
;; Remote call IUserData.processSafeWithdraw
;; push identifier user_data_addr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4279e9fa
;; send_gas_to
;; push identifier send_gas_to
PUSH S2
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function safeWithdraw
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finishSafeWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user
LDMSGADDR
; Decode amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: user
;; param: amount
;; param: send_gas_to
; function finishSafeWithdraw
;; push identifier user
PUSH S2
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; push identifier amount
PUSH S2
; expValue
;; fetch lpTokenBalance
GETGLOB 17
; end expValue
SWAP
SUB
UFITS 128
; colValue
SETGLOB 17
; end colValue
NEWC
ENDC
;; decl: tvmcell
;; emit Withdraw
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x72da1156
;; user
;; push identifier user
PUSH S5
STSLICER
;; amount
;; push identifier amount
PUSH S4
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.transferToRecipient
;; push identifier lpTokenWallet
GETGLOB 16
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
PUSHINT 0
STUR 256
;; recipient_address
;; push identifier user
PUSH S6
STSLICER
;; tokens
;; push identifier amount
PUSH S5
STUR 128
;; deploy_grams
PUSHINT 0
STUR 128
;; transfer_grams
PUSHINT 0
STUR 128
NEWC
;; send_gas_to
;; push identifier send_gas_to
PUSH S5
STSLICER
;; notify_receiver
FALSE
STIR 1
;; payload
;; push identifier tvmcell
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP2
; end function finishSafeWithdraw
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	updatePoolInfo_internal
.type	updatePoolInfo_internal, @function
CALL $updatePoolInfo_internal_macro$

.macro updatePoolInfo_internal_macro
; function updatePoolInfo
PUSHCONT {
	;; if
	;; push identifier now
	NOW
	;; <=
	;; push identifier lastRewardTime
	GETGLOB 11
	LEQ
	PUSHCONT {
		;; return
		RET
	}
	IFJMP
	;; end if
	;; if
	;; push identifier lpTokenBalance
	GETGLOB 17
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier now
		NOW
		; colValue
		SETGLOB 11
		; end colValue
		;; return
		RET
	}
	IFNOTJMP
	;; end if
	;; push identifier lastRewardTime
	GETGLOB 11
	;; push identifier now
	NOW
	CALLREF {
		CALL $getMultiplier_internal_macro$
	}
	;; decl: multiplier
	;; push identifier rewardPerSecond
	GETGLOB 10
	;; *
	;; push identifier multiplier
	PUSH S1
	MUL
	UFITS 128
	;; decl: tonReward
	;; push identifier tonReward
	DUP
	;; *
	PUSHINT 1000000000000000000
	MUL
	UFITS 128
	;; /
	;; push identifier lpTokenBalance
	GETGLOB 17
	DIV
	; expValue
	;; fetch accTonPerShare
	GETGLOB 12
	; end expValue
	SWAP
	ADD
	UFITS 128
	; colValue
	SETGLOB 12
	; end colValue
	; expValue
	; end expValue
	;; push identifier now
	NOW
	; colValue
	SETGLOB 11
	; end colValue
	DROP2
}
CALLX
; end function updatePoolInfo

.globl	deployUserData_internal
.type	deployUserData_internal, @function
CALL $deployUserData_internal_macro$

.macro deployUserData_internal_macro
;; param: _user
; function deployUserData
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier _user
PUSH S1
PUSHINT 2
ROT
PUSHINT 64
DICTUSET
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier userDataCode
GETGLOB 22
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
DUP
HASHCU
;; get member wid
MYADDR
PARSEMSGADDR
INDEX 2
NEWC
STSLICECONST x9_
STI 8
STU 256
ENDC
CTOS
PUSHINT 200000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 1
SENDRAWMSG
NIP
NIP
; end function deployUserData
NIP

.macro getUserDataAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _user
LDMSGADDR
ENDS
;; param: _user
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc8359ba4
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getUserDataAddress_internal
.type	getUserDataAddress_internal, @function
CALL $getUserDataAddress_internal_macro$

.macro getUserDataAddress_internal_macro
;; param: _user
; function getUserDataAddress
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier _user
PUSH S1
PUSHINT 2
ROT
PUSHINT 64
DICTUSET
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier userDataCode
GETGLOB 22
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getUserDataAddress
NIP

.macro on_bounce_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
;; param: slice
; function onBounce
ACCEPT
; expValue
DUP
; end expValue
LDU 32
; colValue
POP S2
; end colValue
;; decl: functionId
;; if
;; push identifier functionId
DUP
;; ==
PUSHINT 14448874
EQUAL
PUSHCONT {
	;; get member balance
	GETPARAM 7
	INDEX 0
	;; -
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	SUB
	UFITS 128
	PUSHINT 2
	RAWRESERVE
	; expValue
	PUSH S1
	; end expValue
	LDU 64
	; colValue
	POP S3
	; end colValue
	;; decl: _deposit_nonce
	;; index
	;; push identifier _deposit_nonce
	DUP
	;; push identifier deposits
	GETGLOB 21
	PUSHINT 128
	DICTUGET
	PUSHCONT {
		LDMSGADDR
		LDU 128
		TUPLE 3
	}
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		TUPLE 3
	}
	IFELSE
	;; decl: deposit
	;; get member user
	;; push identifier deposit
	DUP
	INDEX 0
	CALLREF {
		CALL $deployUserData_internal_macro$
	}
	;; decl: user_data_addr
	;; Remote call UserData.processDeposit
	;; push identifier user_data_addr
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x00dc78ea
	;; nonce
	;; push identifier _deposit_nonce
	PUSH S3
	STUR 64
	;; _amount
	;; get member amount
	;; push identifier deposit
	PUSH S2
	INDEX 1
	STUR 128
	;; _accTonPerShare
	;; push identifier accTonPerShare
	GETGLOB 12
	STUR 128
	ENDC
	PUSHINT 128
	SENDRAWMSG
	BLKDROP 3
}
IF
;; end if
DROP
; end function onBounce
DROP
CALLREF {
	CALL $c7_to_c4$
}

.macro upgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_code
;; decode TvmCell
LDREF
ENDS
;; param: new_code
CALLREF {
	CALL $upgrade_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	upgrade_internal
.type	upgrade_internal, @function
CALL $upgrade_internal_macro$

.macro upgrade_internal_macro
;; param: new_code
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 19
SDEQ
THROWIFNOT 101
; function upgrade
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier rewardPerSecond
GETGLOB 10
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier lastRewardTime
GETGLOB 11
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier accTonPerShare
GETGLOB 12
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier farmStartTime
GETGLOB 13
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier farmEndTime
GETGLOB 14
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier lpTokenRoot
GETGLOB 15
STSLICER
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier lpTokenWallet
GETGLOB 16
STSLICER
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier lpTokenBalance
GETGLOB 17
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier minDeposit
GETGLOB 18
STUR 128
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier owner
GETGLOB 19
STSLICER
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier deposit_nonce
GETGLOB 20
STUR 64
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier deploy_nonce
GETGLOB 23
STUR 64
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier deposits
GETGLOB 21
SWAP
STDICT
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier userDataCode
GETGLOB 22
STREFR
; colValue
NIP
; end colValue
;; push identifier new_code
PUSH S1
SETCODE
;; push identifier new_code
PUSH S1
CTOS
BLESS
POP c3
;; push identifier builder
DUP
ENDC
CALLREF {
	CALL $:onCodeUpgrade$
}
DROP
; end function upgrade
; end modifier onlyOwner
DROP

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro setRewardPerSecond
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode newReward
LDU 128
ENDS
;; param: newReward
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 19
SDEQ
THROWIFNOT 101
; function setRewardPerSecond
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
CALLREF {
	CALL $updatePoolInfo_internal_macro$
}
; expValue
; end expValue
;; push identifier newReward
DUP
; colValue
SETGLOB 10
; end colValue
; end function setRewardPerSecond
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 15
GETGLOB 16
GETGLOB 17
GETGLOB 18
GETGLOB 20
GETGLOB 23
REVERSE 7, 0
STSLICE
STSLICE
STU 128
STU 128
STU 64
STU 64
NEWC
GETGLOB 19
SWAP
STSLICE
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 21
GETGLOB 22
REVERSE 10, 0
STBREF
STBREF
STU 128
STU 128
STU 128
STU 128
STU 128
STDICT
STREF
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
LDU 128
LDU 128
LDU 64
PLDU 64
SETGLOB 23
SETGLOB 20
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
LDREFRTOS
SETGLOB 19
LDU 128
LDU 128
LDU 128
LDU 128
LDU 128
LDDICT
PLDREF
SETGLOB 22
SETGLOB 21
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	LDU 128
	LDU 128
	LDU 64
	PLDU 64
	SETGLOB 23
	SETGLOB 20
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	LDREFRTOS
	SETGLOB 19
	LDU 128
	LDU 128
	LDU 128
	LDU 128
	LDU 128
	LDDICT
	PLDREF
	SETGLOB 22
	SETGLOB 21
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init rewardPerSecond
	PUSHINT 0
	SETGLOB 10
	; init lastRewardTime
	PUSHINT 0
	SETGLOB 11
	; init accTonPerShare
	PUSHINT 0
	SETGLOB 12
	; init farmStartTime
	PUSHINT 0
	SETGLOB 13
	; init farmEndTime
	PUSHINT 0
	SETGLOB 14
	; init lpTokenRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init lpTokenWallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 16
	; init lpTokenBalance
	PUSHINT 0
	SETGLOB 17
	; init minDeposit
	PUSHINT 0
	SETGLOB 18
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 19
	; init deposit_nonce
	PUSHINT 0
	SETGLOB 20
	; init deposits
	NEWDICT
	SETGLOB 21
	; init userDataCode
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 22
	; init deploy_nonce
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 64
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 23
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: deposit_nonce
	PUSHINT 0
	SETGLOB 20
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	CALL $on_bounce_macro$
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro rewardPerSecond
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xee8bac33
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro lastRewardTime
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xa6cb2c52
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro accTonPerShare
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xc92b3cb7
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro farmStartTime
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x8094afbb
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro farmEndTime
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xc1570ea9
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro lpTokenRoot
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xbfff1afe
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro lpTokenWallet
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 16
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x81f412b3
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro lpTokenBalance
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 17
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x89815d2e
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro minDeposit
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 18
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xfca1d7f9
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 19
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xdf0bcfde
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro deposit_nonce
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 20
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe4b08751
PUSH S1
STUR 64
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro userDataCode
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 22
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe792a3a5
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro deploy_nonce
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 23
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xfb510e82
PUSH S1
STUR 64
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 400749881
LEQ
PUSHCONT {
	DUP
	PUSHINT 32772787
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 9744315
		EQUAL
		IFJMPREF {
			CALL $farmStartTime$
		}
		DUP
		PUSHINT 32772787
		EQUAL
		IFJMPREF {
			CALL $lpTokenWallet$
		}
	}
	IFJMP
	DUP
	PUSHINT 171622605
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 159472942
		EQUAL
		IFJMPREF {
			CALL $lpTokenBalance$
		}
		DUP
		PUSHINT 171622605
		EQUAL
		IFJMPREF {
			CALL $withdraw$
		}
	}
	IFJMP
	DUP
	PUSHINT 317981552
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 213170877
		EQUAL
		IFJMPREF {
			CALL $setRewardPerSecond$
		}
		DUP
		PUSHINT 317981552
		EQUAL
		IFJMPREF {
			CALL $withdrawAll$
		}
	}
	IFJMP
	DUP
	PUSHINT 400749881
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 388172858
		EQUAL
		IFJMPREF {
			CALL $upgrade$
		}
		DUP
		PUSHINT 400749881
		EQUAL
		IFJMPREF {
			CALL $withdrawUnclaimed$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1404649612
LEQ
PUSHCONT {
	DUP
	PUSHINT 987939198
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 650849362
		EQUAL
		IFJMPREF {
			CALL $lastRewardTime$
		}
		DUP
		PUSHINT 987939198
		EQUAL
		IFJMPREF {
			CALL $pendingReward$
		}
	}
	IFJMP
	DUP
	PUSHINT 1096224425
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1073683198
		EQUAL
		IFJMPREF {
			CALL $lpTokenRoot$
		}
		DUP
		PUSHINT 1096224425
		EQUAL
		IFJMPREF {
			CALL $farmEndTime$
		}
	}
	IFJMP
	DUP
	PUSHINT 1227570359
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1211472804
		EQUAL
		IFJMPREF {
			CALL $getUserDataAddress$
		}
		DUP
		PUSHINT 1227570359
		EQUAL
		IFJMPREF {
			CALL $accTonPerShare$
		}
	}
	IFJMP
	DUP
	PUSHINT 1404649612
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1354746527
		EQUAL
		IFJMPREF {
			CALL $receiveTokenWalletAddress$
		}
		DUP
		PUSHINT 1404649612
		EQUAL
		IFJMPREF {
			CALL $finishSafeWithdraw$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1854647347
LEQ
PUSHCONT {
	DUP
	PUSHINT 1497440185
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1428662668
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 1497440185
		EQUAL
		IFJMPREF {
			CALL $tokensReceivedCallback$
		}
	}
	IFJMP
	DUP
	PUSHINT 1582539854
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1505103624
		EQUAL
		IFJMPREF {
			CALL $getMultiplier$
		}
		DUP
		PUSHINT 1582539854
		EQUAL
		IFJMPREF {
			CALL $finishWithdraw$
		}
	}
	IFJMP
	DUP
	PUSHINT 1689290577
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1594609630
		EQUAL
		IFJMPREF {
			CALL $owner$
		}
		DUP
		PUSHINT 1689290577
		EQUAL
		IFJMPREF {
			CALL $deposit_nonce$
		}
	}
	IFJMP
	DUP
	PUSHINT 1854647347
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1737663397
		EQUAL
		IFJMPREF {
			CALL $userDataCode$
		}
		DUP
		PUSHINT 1854647347
		EQUAL
		IFJMPREF {
			CALL $rewardPerSecond$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 2090981369
LEQ
PUSHCONT {
	DUP
	PUSHINT 2068813800
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 2036008553
		EQUAL
		IFJMPREF {
			CALL $finishDeposit$
		}
		DUP
		PUSHINT 2068813800
		EQUAL
		IFJMPREF {
			CALL $safeWithdraw$
		}
	}
	IFJMP
	DUP
	PUSHINT 2086397552
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 2068909698
		EQUAL
		IFJMPREF {
			CALL $deploy_nonce$
		}
		DUP
		PUSHINT 2086397552
		EQUAL
		IFJMPREF {
			CALL $finishWithdrawAll$
		}
	}
	IFJMP
	DUP
	PUSHINT 2090981369
	EQUAL
	IFJMPREF {
		CALL $minDeposit$
	}
}
IFJMP
