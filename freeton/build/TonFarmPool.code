.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode _owner
LDMSGADDR
; Decode _rewardPerSecond
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode _farmStartTime
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode _farmEndTime
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode _tokenRoot
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode _rewardTokenRoot
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
;; param: _owner
;; param: _rewardPerSecond
;; param: _farmStartTime
;; param: _farmEndTime
;; param: _tokenRoot
;; param: _rewardTokenRoot
; constructor TonFarmPool
;; push identifier _farmStartTime
PUSH S3
;; <
;; push identifier _farmEndTime
PUSH S3
LESS
THROWIFNOT 110
;; get member length
;; push identifier _rewardPerSecond
PUSH S4
INDEX 0
;; ==
;; get member length
;; push identifier _rewardTokenRoot
PUSH S1
INDEX 0
EQUAL
THROWIFNOT 111
;; get member sender
GETGLOB 9
;; push identifier fabric
GETGLOB 27
SDEQ
THROWIFNOT 112
ACCEPT
; expValue
; end expValue
;; push identifier _rewardPerSecond
PUSH S4
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier _farmStartTime
PUSH S3
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier _farmEndTime
PUSH S2
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier _tokenRoot
PUSH S1
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier _rewardTokenRoot
DUP
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier _owner
PUSH S5
; colValue
SETGLOB 23
; end colValue
CALLREF {
	CALL $_initialize_reward_arrays_internal_macro$
}
CALLREF {
	CALL $setUpTokenWallets_internal_macro$
}
;; Remote call IFabric.onPoolDeploy
;; push identifier fabric
GETGLOB 27
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x38f943e9
;; pool_deploy_nonce
;; push identifier deploy_nonce
GETGLOB 28
STUR 64
;; pool_owner
;; push identifier _owner
PUSH S7
STSLICER
;; rewardPerSecond
;; push identifier _rewardPerSecond
PUSH S6
UNPAIR
XCHG s2
STU 32
STDICT
;; farmStartTime
;; push identifier _farmStartTime
PUSH S5
STUR 256
;; farmEndTime
;; push identifier _farmEndTime
PUSH S4
STUR 256
NEWC
;; tokenRoot
;; push identifier _tokenRoot
PUSH S4
STSLICER
;; rewardTokenRoot
;; push identifier _rewardTokenRoot
PUSH S3
UNPAIR
XCHG s2
STU 32
STDICT
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end constructor TonFarmPool
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_initialize_reward_arrays_internal
.type	_initialize_reward_arrays_internal, @function
CALL $_initialize_reward_arrays_internal_macro$

.macro _initialize_reward_arrays_internal_macro
; function _initialize_reward_arrays
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier rewardTokenRoot
	GETGLOB 18
	INDEX 0
	LESS
}
PUSHCONT {
	; expValue
	;; fetch accTonPerShare
	GETGLOB 17
	; end expValue
	PUSHINT 0
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	SETGLOB 17
	; end colValue
	; expValue
	;; fetch rewardTokenWallet
	GETGLOB 19
	; end expValue
	;; address.makeAddrNone()
	PUSHSLICE x2_
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSET
	PAIR
	; colValue
	SETGLOB 19
	; end colValue
	; expValue
	;; fetch rewardTokenBalance
	GETGLOB 20
	; end expValue
	PUSHINT 0
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	SETGLOB 20
	; end colValue
	; expValue
	;; fetch rewardTokenBalanceCumulative
	GETGLOB 21
	; end expValue
	PUSHINT 0
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	SETGLOB 21
	; end colValue
	; expValue
	;; fetch unclaimedReward
	GETGLOB 22
	; end expValue
	PUSHINT 0
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	SETGLOB 22
	; end colValue
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; end function _initialize_reward_arrays

.globl	_reserve_internal
.type	_reserve_internal, @function
CALL $_reserve_internal_macro$

.macro _reserve_internal_macro
; function _reserve
;; return
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 1000000000
MAX
; end function _reserve

.macro getVersion
DROP
; Decode input parameters
ENDS
; function getVersion
;; return
PUSHINT 2
PUSHINT 0
PUSHINT 0
; end function getVersion
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xda2523b8
	PUSH S3
	STUR 8
	PUSH S2
	STUR 8
	PUSH S1
	STUR 8
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getDetails
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getDetails
;; return
;; push identifier lastRewardTime
GETGLOB 10
;; push identifier farmStartTime
GETGLOB 11
;; push identifier farmEndTime
GETGLOB 12
;; push identifier tokenRoot
GETGLOB 13
;; push identifier tokenWallet
GETGLOB 14
;; push identifier tokenBalance
GETGLOB 15
;; push identifier rewardPerSecond
GETGLOB 16
;; push identifier accTonPerShare
GETGLOB 17
;; push identifier rewardTokenRoot
GETGLOB 18
;; push identifier rewardTokenWallet
GETGLOB 19
;; push identifier rewardTokenBalance
GETGLOB 20
;; push identifier rewardTokenBalanceCumulative
GETGLOB 21
;; push identifier unclaimedReward
GETGLOB 22
;; push identifier owner
GETGLOB 23
;; push identifier fabric
GETGLOB 27
TUPLE 15
; end function getDetails
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xa3548d56
	PUSH S2
	UNTUPLE 15
	BLKSWAP 1, 15
	PUSH S15
	STUR 256
	PUSH S14
	STUR 256
	PUSH S13
	STUR 256
	NEWC
	PUSH S13
	STSLICER
	PUSH S12
	STSLICER
	PUSH S11
	STUR 256
	PUSH S10
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S9
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S8
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	NEWC
	PUSH S8
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S7
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S6
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	NEWC
	PUSH S6
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	BLKDROP2 15, 4
	STBREFR
	STBREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNTUPLE 15
	BLKSWAP 1, 15
	PUSH S15
	STUR 256
	PUSH S14
	STUR 256
	PUSH S13
	STUR 256
	NEWC
	PUSH S13
	STSLICER
	PUSH S12
	STSLICER
	PUSH S11
	STUR 256
	PUSH S10
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S9
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S8
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	NEWC
	PUSH S8
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S7
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S6
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	NEWC
	PUSH S6
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	BLKDROP2 15, 4
	STBREFR
	STBREFR
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setUpTokenWallets_internal
.type	setUpTokenWallets_internal, @function
CALL $setUpTokenWallets_internal_macro$

.macro setUpTokenWallets_internal_macro
; function setUpTokenWallets
;; Remote call IRootTokenContract.deployEmptyWallet
;; push identifier tokenRoot
GETGLOB 13
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x41dcd6500000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x542b1672
;; deploy_grams
PUSHINT 100000000
STUR 128
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
MYADDR
STSLICER
;; gas_back_address
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IRootTokenContract.getWalletAddress
;; push identifier tokenRoot
GETGLOB 13
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x41dcd6500000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x069a08f8
STSLICECONST x50bfca9f
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier rewardTokenRoot
	GETGLOB 18
	INDEX 0
	LESS
}
PUSHCONT {
	;; Remote call IRootTokenContract.deployEmptyWallet
	;; index
	;; push identifier i
	DUP
	;; push identifier rewardTokenRoot
	GETGLOB 18
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x41dcd6500000000000000000000000000004_
	STSLICER
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x542b1672
	;; deploy_grams
	PUSHINT 100000000
	STUR 128
	;; wallet_public_key
	PUSHINT 0
	STUR 256
	;; owner_address
	MYADDR
	STSLICER
	;; gas_back_address
	MYADDR
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
	;; Remote call IRootTokenContract.getWalletAddress
	;; index
	;; push identifier i
	DUP
	;; push identifier rewardTokenRoot
	GETGLOB 18
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x41dcd6500000000000000000000000000004_
	STSLICER
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x069a08f8
	STSLICECONST x50bfca9f
	;; wallet_public_key
	PUSHINT 0
	STUR 256
	;; owner_address
	MYADDR
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; end function setUpTokenWallets

.macro receiveTokenWalletAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode wallet
LDMSGADDR
ENDS
;; param: wallet
; function receiveTokenWalletAddress
;; if
;; get member sender
GETGLOB 9
;; push identifier tokenRoot
GETGLOB 13
SDEQ
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier wallet
	DUP
	; colValue
	SETGLOB 14
	; end colValue
	;; Remote call ITONTokenWallet.setReceiveCallback
	;; push identifier wallet
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x402faf080000000000000000000000000004_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x71eee875
	;; receive_callback
	MYADDR
	STSLICER
	;; allow_non_notifiable
	FALSE
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier rewardTokenRoot
		GETGLOB 18
		INDEX 0
		LESS
	}
	PUSHCONT {
		;; if
		;; get member sender
		GETGLOB 9
		;; index
		;; push identifier i
		PUSH S1
		;; push identifier rewardTokenRoot
		GETGLOB 18
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		SDEQ
		PUSHCONT {
			; expValue
			;; fetch rewardTokenWallet
			GETGLOB 19
			UNPAIR
			;; push identifier i
			PUSH S2
			SWAP
			PUSH2 s1,s2
			LESS
			THROWIFNOT 50
			; end expValue
			;; push identifier wallet
			PUSH S4
			; colValue
			ROTREV
			PUSHINT 32
			DICTUSET
			PAIR
			SETGLOB 19
			; end colValue
			;; Remote call ITONTokenWallet.setReceiveCallback
			;; push identifier wallet
			PUSH S1
			NEWC
			STSLICECONST x62_
			STSLICE
			PUSHSLICE x402faf080000000000000000000000000004_
			STSLICER
			STSLICECONST 0
			STSLICECONST 0
			STSLICECONST x71eee875
			;; receive_callback
			MYADDR
			STSLICER
			;; allow_non_notifiable
			FALSE
			STIR 1
			ENDC
			PUSHINT 0
			SENDRAWMSG
		}
		IF
		;; end if
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
}
IFELSE
;; end if
; end function receiveTokenWalletAddress
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	transferReward_internal
.type	transferReward_internal, @function
CALL $transferReward_internal_macro$

.macro transferReward_internal_macro
;; param: receiver_addr
;; param: amount
; function transferReward
NEWC
ENDC
;; decl: tvmcell
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier amount
	PUSH S3
	INDEX 0
	LESS
}
PUSHCONT {
	;; index
	;; push identifier i
	DUP
	;; push identifier rewardTokenBalance
	GETGLOB 20
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	;; index
	;; push identifier i
	PUSH S1
	;; push identifier amount
	PUSH S4
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	MIN
	;; decl: _amount
	;; if
	;; push identifier _amount
	DUP
	GTINT 0
	PUSHCONT {
		;; Remote call ITONTokenWallet.transferToRecipient
		;; index
		;; push identifier i
		PUSH S1
		;; push identifier rewardTokenWallet
		GETGLOB 19
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHSLICE x41dcd6500000000000000000000000000004_
		STSLICER
		STSLICECONST 0
		STSLICECONST 1
		NEWC
		STSLICECONST x3f10d1ab
		;; recipient_public_key
		PUSHINT 0
		STUR 256
		;; recipient_address
		;; push identifier receiver_addr
		PUSH S6
		STSLICER
		;; tokens
		;; push identifier _amount
		PUSH S2
		;; uint128
		UFITS 128
		STUR 128
		;; deploy_grams
		PUSHINT 0
		STUR 128
		;; transfer_grams
		PUSHINT 0
		STUR 128
		NEWC
		;; send_gas_to
		;; push identifier receiver_addr
		PUSH S7
		STSLICER
		;; notify_receiver
		FALSE
		STIR 1
		;; payload
		;; push identifier tvmcell
		PUSH S5
		STREFR
		STBREFR
		STBREFR
		ENDC
		PUSHINT 0
		SENDRAWMSG
		;; push identifier _amount
		DUP
		; expValue
		;; fetch rewardTokenBalance
		GETGLOB 20
		UNPAIR
		;; push identifier i
		PUSH S4
		SWAP
		PUSH2 s1,s2
		LESS
		THROWIFNOT 50
		PUSH2 S1, S0
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		; end expValue
		BLKSWAP 1, 4
		SUB
		UFITS 256
		; colValue
		NEWC
		STU 256
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		SETGLOB 20
		; end colValue
	}
	IF
	;; end if
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
DROP
; end function transferReward
DROP2

.macro tokensReceivedCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode token_wallet
LDMSGADDR
; Decode token_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode sender_public_key
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode sender_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode sender_wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode original_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode updated_balance
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode payload
;; decode TvmCell
LDREF
ENDS
;; param: token_wallet
;; param: token_root
;; param: amount
;; param: sender_public_key
;; param: sender_address
;; param: sender_wallet
;; param: original_gas_to
;; param: updated_balance
;; param: payload
; function tokensReceivedCallback
PUSHCONT {
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	PUSHINT 2
	RAWRESERVE
	;; if
	FALSE ; decl return flag
	;; get member sender
	GETGLOB 9
	;; push identifier tokenWallet
	GETGLOB 14
	SDEQ
	PUSHCONT {
		;; if
		;; get member value
		;; push identifier sender_address
		PUSH S5
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		EQINT 0
		;; short-circuiting ||
		DUP
		PUSHCONT {
			DROP
			;; get member value
			CALLREF {
				CALL $message_balance_macro$
			}
			;; <
			PUSHINT 1000000000
			;; +
			PUSHINT 500000000
			;; *
			;; get member length
			;; push identifier rewardTokenRoot
			GETGLOB 18
			INDEX 0
			MUL
			ADD
			LESS
		}
		IFNOT
		PUSHCONT {
			NEWC
			ENDC
			;; decl: tvmcell
			;; Remote call ITONTokenWallet.transfer
			;; push identifier tokenWallet
			GETGLOB 14
			NEWC
			STSLICECONST x62_
			STSLICE
			PUSHINT 109
			STZEROES
			STSLICECONST 0
			STSLICECONST 1
			NEWC
			STSLICECONST x4bf160e2
			;; to
			;; push identifier sender_wallet
			PUSH S7
			STSLICER
			;; tokens
			;; push identifier amount
			PUSH S10
			STUR 128
			;; grams
			PUSHINT 0
			STUR 128
			;; send_gas_to
			;; push identifier original_gas_to
			PUSH S6
			STSLICER
			;; notify_receiver
			FALSE
			STIR 1
			;; payload
			;; push identifier tvmcell
			PUSH S2
			STREFR
			STBREFR
			ENDC
			PUSHINT 128
			SENDRAWMSG
			;; return
			DROP2
			PUSHINT 4
			RET
		}
		IFJMP
		;; end if
		CALLREF {
			CALL $updatePoolInfo_internal_macro$
		}
		PUSHINT 1
		; expValue
		;; fetch deposit_nonce
		GETGLOB 24
		; end expValue
		SWAP
		ADD
		UFITS 64
		; colValue
		SETGLOB 24
		; end colValue
		;; push identifier amount
		PUSH S7
		; expValue
		;; fetch tokenBalance
		GETGLOB 15
		; end expValue
		SWAP
		ADD
		; colValue
		SETGLOB 15
		; end colValue
		;; push identifier sender_address
		PUSH S5
		;; push identifier amount
		PUSH S8
		;; push identifier original_gas_to
		PUSH S5
		TUPLE 3
		; expValue
		;; fetch deposits
		GETGLOB 25
		;; push identifier deposit_nonce
		GETGLOB 24
		SWAP
		; end expValue
		ROT
		; colValue
		UNTUPLE 3
		NEWC
		PUSH S3
		STSLICER
		PUSH S2
		STUR 256
		PUSH S1
		STSLICER
		BLKDROP2 3, 1
		ROTREV
		PUSHINT 64
		DICTUSETB
		SETGLOB 25
		; end colValue
		;; push identifier sender_address
		PUSH S5
		CALLREF {
			CALL $getUserDataAddress_internal_macro$
		}
		;; decl: userDataAddr
		;; Remote call UserData.processDeposit
		;; push identifier userDataAddr
		DUP
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x12080b7d
		;; nonce
		;; push identifier deposit_nonce
		GETGLOB 24
		STUR 64
		;; _amount
		;; push identifier amount
		PUSH S9
		STUR 256
		;; _accTonPerShare
		;; push identifier accTonPerShare
		GETGLOB 17
		UNPAIR
		XCHG s2
		STU 32
		STDICT
		ENDC
		PUSHINT 128
		SENDRAWMSG
		DROP
	}
	PUSHCONT {
		; for
		PUSHINT 0
		;; decl: i
		PUSHCONT {
			;; push identifier i
			DUP
			;; <
			;; get member length
			;; push identifier rewardTokenWallet
			GETGLOB 19
			INDEX 0
			LESS
		}
		PUSHCONT {
			;; if
			;; get member sender
			GETGLOB 9
			;; index
			;; push identifier i
			PUSH S1
			;; push identifier rewardTokenWallet
			GETGLOB 19
			INDEX 1
			PUSHINT 32
			DICTUGET
			THROWIFNOT 50
			SDEQ
			PUSHCONT {
				;; push identifier amount
				PUSH S8
				; expValue
				;; fetch rewardTokenBalance
				GETGLOB 20
				UNPAIR
				;; push identifier i
				PUSH S3
				SWAP
				PUSH2 s1,s2
				LESS
				THROWIFNOT 50
				PUSH2 S1, S0
				PUSHINT 32
				DICTUGET
				THROWIFNOT 50
				PLDU 256
				; end expValue
				BLKSWAP 1, 4
				ADD
				; colValue
				NEWC
				STU 256
				ROTREV
				PUSHINT 32
				DICTUSETB
				PAIR
				SETGLOB 20
				; end colValue
				;; push identifier amount
				PUSH S8
				; expValue
				;; fetch rewardTokenBalanceCumulative
				GETGLOB 21
				UNPAIR
				;; push identifier i
				PUSH S3
				SWAP
				PUSH2 s1,s2
				LESS
				THROWIFNOT 50
				PUSH2 S1, S0
				PUSHINT 32
				DICTUGET
				THROWIFNOT 50
				PLDU 256
				; end expValue
				BLKSWAP 1, 4
				ADD
				; colValue
				NEWC
				STU 256
				ROTREV
				PUSHINT 32
				DICTUSETB
				PAIR
				SETGLOB 21
				; end colValue
				;; emit RewardDeposit
				NEWC
				PUSHSLICE xc0000000000000000000000002_
				STSLICER
				STSLICECONST 0
				STSLICECONST 0
				STSLICECONST x2fd6292c
				;; token_root
				;; index
				;; push identifier i
				PUSH S1
				;; push identifier rewardTokenRoot
				GETGLOB 18
				INDEX 1
				PUSHINT 32
				DICTUGET
				THROWIFNOT 50
				STSLICER
				;; amount
				;; push identifier amount
				PUSH S9
				STUR 256
				ENDC
				PUSHINT 0
				SENDRAWMSG
			}
			IF
			;; end if
			;; ++
			; expValue
			; end expValue
			INC
			; colValue
			; end colValue
		}
		WHILE
		DROP
		; end for
		;; transfer()
		;; push identifier original_gas_to
		PUSH S3
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
		;; return
		DROP
		PUSHINT 4
		RET
	}
	IFELSE
	EQINT 4
	IFRET
	;; end if
}
CALLX
; end function tokensReceivedCallback
BLKDROP 9
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finishDeposit
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _deposit_nonce
LDU 64
; Decode _prevAmount
LDU 256
; Decode _prevRewardDebt
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode _accTonPerShare
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
;; param: _deposit_nonce
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _accTonPerShare
; function finishDeposit
;; index
;; push identifier _deposit_nonce
PUSH S3
;; push identifier deposits
GETGLOB 25
PUSHINT 64
DICTUGET
PUSHCONT {
	LDMSGADDR
	LDU 256
	TUPLE 3
}
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	TUPLE 3
}
IFELSE
;; decl: deposit
;; get member user
;; push identifier deposit
DUP
INDEX 0
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
PUSHINT 0
NEWDICT
PAIR
;; decl: pending
;; if
;; push identifier _prevAmount
PUSH S5
GTINT 0
PUSHCONT {
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier _prevRewardDebt
		PUSH S6
		INDEX 0
		LESS
	}
	PUSHCONT {
		; expValue
		PUSH S1
		; end expValue
		;; push identifier _prevAmount
		PUSH S7
		;; *
		;; index
		;; push identifier i
		PUSH S2
		;; push identifier _accTonPerShare
		PUSH S7
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		MUL
		;; /
		PUSHINT 1000000000000000000
		DIV
		;; -
		;; index
		;; push identifier i
		PUSH S2
		;; push identifier _prevRewardDebt
		PUSH S8
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		SUB
		UFITS 256
		;; array.push(..)
		NEWC
		STU 256
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP S2
		; end colValue
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
}
IF
;; end if
;; if
;; get member length
;; push identifier pending
DUP
INDEX 0
GTINT 0
PUSHCONT {
	;; get member user
	;; push identifier deposit
	PUSH S2
	INDEX 0
	;; push identifier pending
	PUSH S1
	CALLREF {
		CALL $transferReward_internal_macro$
	}
}
IF
;; end if
;; emit Deposit
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4bfd137c
;; user
;; get member user
;; push identifier deposit
PUSH S3
INDEX 0
STSLICER
;; amount
;; get member amount
;; push identifier deposit
PUSH S3
INDEX 1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
;; delete
; expValue
;; fetch deposits
GETGLOB 25
;; push identifier _deposit_nonce
PUSH S7
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 64
DICTUDEL
DROP
; colValue
NIP
SETGLOB 25
; end colValue
;; transfer()
;; get member send_gas_to
;; push identifier deposit
PUSH S2
INDEX 2
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 3
; end function finishDeposit
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode amount
LDU 256
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: amount
;; param: send_gas_to
CALLREF {
	CALL $withdraw_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	withdraw_internal
.type	withdraw_internal, @function
CALL $withdraw_internal_macro$

.macro withdraw_internal_macro
;; param: amount
;; param: send_gas_to
; function withdraw
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; push identifier amount
PUSH S1
GTINT 0
THROWIFNOT 107
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 108
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
CALLREF {
	CALL $updatePoolInfo_internal_macro$
}
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: userDataAddr
;; Remote call UserData.processWithdraw
;; push identifier userDataAddr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x220e2ff2
;; _amount
;; push identifier amount
PUSH S4
STUR 256
;; _accTonPerShare
;; push identifier accTonPerShare
GETGLOB 17
UNPAIR
XCHG s2
STU 32
STDICT
;; send_gas_to
;; push identifier send_gas_to
PUSH S3
STSLICER
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function withdraw
DROP2

.macro withdrawAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $withdrawAll_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	withdrawAll_internal
.type	withdrawAll_internal, @function
CALL $withdrawAll_internal_macro$

.macro withdrawAll_internal_macro
; function withdrawAll
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 108
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
CALLREF {
	CALL $updatePoolInfo_internal_macro$
}
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: userDataAddr
;; Remote call UserData.processWithdrawAll
;; push identifier userDataAddr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6de60f6d
;; _accTonPerShare
;; push identifier accTonPerShare
GETGLOB 17
UNPAIR
XCHG s2
STU 32
STDICT
;; send_gas_to
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function withdrawAll

.macro finishWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user
LDMSGADDR
; Decode _prevAmount
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode _prevRewardDebt
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode _withdrawAmount
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode _accTonPerShare
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: user
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _withdrawAmount
;; param: _accTonPerShare
;; param: send_gas_to
CALLREF {
	CALL $finishWithdraw_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	finishWithdraw_internal
.type	finishWithdraw_internal, @function
CALL $finishWithdraw_internal_macro$

.macro finishWithdraw_internal_macro
;; param: user
;; param: _prevAmount
;; param: _prevRewardDebt
;; param: _withdrawAmount
;; param: _accTonPerShare
;; param: send_gas_to
; function finishWithdraw
;; push identifier user
PUSH S5
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
PUSHINT 0
NEWDICT
PAIR
;; decl: pending
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier _accTonPerShare
	PUSH S5
	INDEX 0
	LESS
}
PUSHCONT {
	; expValue
	PUSH S1
	; end expValue
	;; push identifier _prevAmount
	PUSH S8
	;; *
	;; index
	;; push identifier i
	PUSH S2
	;; push identifier _accTonPerShare
	PUSH S7
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	MUL
	;; /
	PUSHINT 1000000000000000000
	DIV
	;; -
	;; index
	;; push identifier i
	PUSH S2
	;; push identifier _prevRewardDebt
	PUSH S9
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	SUB
	UFITS 256
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S2
	; end colValue
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
;; push identifier _withdrawAmount
PUSH S4
; expValue
;; fetch tokenBalance
GETGLOB 15
; end expValue
SWAP
SUB
UFITS 256
; colValue
SETGLOB 15
; end colValue
;; if
;; get member length
;; push identifier pending
DUP
INDEX 0
GTINT 0
PUSHCONT {
	;; push identifier user
	PUSH S7
	;; push identifier pending
	PUSH S1
	CALLREF {
		CALL $transferReward_internal_macro$
	}
}
IF
;; end if
NEWC
ENDC
;; decl: tvmcell
;; emit Withdraw
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6b2aceeb
;; user
;; push identifier user
PUSH S9
STSLICER
;; amount
;; push identifier _withdrawAmount
PUSH S6
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.transferToRecipient
;; push identifier tokenWallet
GETGLOB 14
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
PUSHINT 0
STUR 256
;; recipient_address
;; push identifier user
PUSH S10
STSLICER
;; tokens
;; push identifier _withdrawAmount
PUSH S7
;; uint128
UFITS 128
STUR 128
;; deploy_grams
PUSHINT 0
STUR 128
;; transfer_grams
PUSHINT 0
STUR 128
NEWC
;; send_gas_to
;; push identifier send_gas_to
PUSH S6
STSLICER
;; notify_receiver
FALSE
STIR 1
;; payload
;; push identifier tvmcell
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 3
; end function finishWithdraw
BLKDROP 6

.macro withdrawUnclaimed
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode to
LDMSGADDR
ENDS
;; param: to
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 23
SDEQ
THROWIFNOT 101
; function withdrawUnclaimed
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 100
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
;; push identifier to
DUP
;; push identifier unclaimedReward
GETGLOB 22
CALLREF {
	CALL $transferReward_internal_macro$
}
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier unclaimedReward
	GETGLOB 22
	INDEX 0
	LESS
}
PUSHCONT {
	; expValue
	;; fetch unclaimedReward
	GETGLOB 22
	UNPAIR
	;; push identifier i
	PUSH S2
	SWAP
	PUSH2 s1,s2
	LESS
	THROWIFNOT 50
	; end expValue
	PUSHINT 0
	; colValue
	NEWC
	STU 256
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	SETGLOB 22
	; end colValue
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; end function withdrawUnclaimed
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro pendingReward
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user_amount
LDU 256
; Decode user_reward_debt
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
;; param: user_amount
;; param: user_reward_debt
; function pendingReward
;; push identifier accTonPerShare
GETGLOB 17
;; decl: _accTonPerShare
;; if
;; push identifier now
NOW
;; >
;; push identifier lastRewardTime
GETGLOB 10
GREATER
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier tokenBalance
	GETGLOB 15
	NEQINT 0
}
IF
PUSHCONT {
	;; push identifier lastRewardTime
	GETGLOB 10
	;; push identifier now
	NOW
	CALLREF {
		CALL $getMultiplier_internal_macro$
	}
	;; decl: multiplier
	PUSHINT 0
	NEWDICT
	PAIR
	;; decl: _reward
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier rewardPerSecond
		GETGLOB 16
		INDEX 0
		LESS
	}
	PUSHCONT {
		; expValue
		PUSH S1
		; end expValue
		;; push identifier multiplier
		PUSH S3
		;; *
		;; index
		;; push identifier i
		PUSH S2
		;; push identifier rewardPerSecond
		GETGLOB 16
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		MUL
		;; array.push(..)
		NEWC
		STU 256
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP S2
		; end colValue
		;; index
		;; push identifier i
		DUP
		;; push identifier _reward
		PUSH S2
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		;; *
		PUSHINT 1000000000000000000
		MUL
		;; /
		;; push identifier tokenBalance
		GETGLOB 15
		DIV
		; expValue
		PUSH S4
		UNPAIR
		;; push identifier i
		PUSH S3
		SWAP
		PUSH2 s1,s2
		LESS
		THROWIFNOT 50
		PUSH2 S1, S0
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		; end expValue
		BLKSWAP 1, 4
		ADD
		; colValue
		NEWC
		STU 256
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		POP S4
		; end colValue
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
	DROP2
}
IF
;; end if
PUSHINT 0
NEWDICT
PAIR
;; decl: _final_reward
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier rewardPerSecond
	GETGLOB 16
	INDEX 0
	LESS
}
PUSHCONT {
	; expValue
	PUSH S1
	; end expValue
	;; push identifier user_amount
	PUSH S5
	;; *
	;; index
	;; push identifier i
	PUSH S2
	;; push identifier _accTonPerShare
	PUSH S5
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	MUL
	;; /
	PUSHINT 1000000000000000000
	DIV
	;; -
	;; index
	;; push identifier i
	PUSH S2
	;; push identifier user_reward_debt
	PUSH S6
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	SUB
	UFITS 256
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S2
	; end colValue
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
;; return
;; push identifier _final_reward
DUP
BLKDROP2 2, 1
; end function pendingReward
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x9780371f
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getMultiplier
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode from
LDU 256
; Decode to
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: from
;; param: to
CALLREF {
	CALL $getMultiplier_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf7df0fe2
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMultiplier_internal
.type	getMultiplier_internal, @function
CALL $getMultiplier_internal_macro$

.macro getMultiplier_internal_macro
;; param: from
;; param: to
;; ret param: retParam@0
PUSHINT 0
; function getMultiplier
PUSHCONT {
	;; push identifier from
	PUSH S2
	;; <=
	;; push identifier to
	PUSH S2
	LEQ
	THROWIFNOT 110
	;; if
	;; push identifier from
	PUSH S2
	;; >
	;; push identifier farmEndTime
	GETGLOB 12
	GREATER
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier to
		PUSH S1
		;; <
		;; push identifier farmStartTime
		GETGLOB 11
		LESS
	}
	IFNOT
	PUSHCONT {
		;; return
		PUSHINT 0
		NIP
		RET
	}
	IFJMP
	;; end if
	;; if
	;; push identifier to
	PUSH S1
	;; >
	;; push identifier farmEndTime
	GETGLOB 12
	GREATER
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier farmEndTime
		GETGLOB 12
		; colValue
		POP S2
		; end colValue
	}
	IF
	;; end if
	;; if
	;; push identifier from
	PUSH S2
	;; <
	;; push identifier farmStartTime
	GETGLOB 11
	LESS
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier farmStartTime
		GETGLOB 11
		; colValue
		POP S3
		; end colValue
	}
	IF
	;; end if
	;; return
	;; push identifier to
	PUSH S1
	;; -
	;; push identifier from
	PUSH S3
	SUB
	UFITS 256
	NIP
}
CALLX
; end function getMultiplier
BLKDROP2 2, 1

.macro safeWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode send_gas_to
LDMSGADDR
ENDS
;; param: send_gas_to
; function safeWithdraw
;; get member value
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 106
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 108
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
;; get member sender
GETGLOB 9
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: user_data_addr
;; Remote call IUserData.processSafeWithdraw
;; push identifier user_data_addr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4279e9fa
;; send_gas_to
;; push identifier send_gas_to
PUSH S2
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function safeWithdraw
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finishSafeWithdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode user
LDMSGADDR
; Decode amount
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: user
;; param: amount
;; param: send_gas_to
; function finishSafeWithdraw
;; push identifier user
PUSH S2
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; decl: expectedAddr
;; push identifier expectedAddr
DUP
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 105
CALLREF {
	CALL $_reserve_internal_macro$
}
PUSHINT 2
RAWRESERVE
;; push identifier amount
PUSH S2
; expValue
;; fetch tokenBalance
GETGLOB 15
; end expValue
SWAP
SUB
UFITS 256
; colValue
SETGLOB 15
; end colValue
NEWC
ENDC
;; decl: tvmcell
;; emit Withdraw
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6b2aceeb
;; user
;; push identifier user
PUSH S5
STSLICER
;; amount
;; push identifier amount
PUSH S4
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.transferToRecipient
;; push identifier tokenWallet
GETGLOB 14
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
PUSHINT 0
STUR 256
;; recipient_address
;; push identifier user
PUSH S6
STSLICER
;; tokens
;; push identifier amount
PUSH S5
;; uint128
UFITS 128
STUR 128
;; deploy_grams
PUSHINT 0
STUR 128
;; transfer_grams
PUSHINT 0
STUR 128
NEWC
;; send_gas_to
;; push identifier send_gas_to
PUSH S5
STSLICER
;; notify_receiver
FALSE
STIR 1
;; payload
;; push identifier tvmcell
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP2
; end function finishSafeWithdraw
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	updatePoolInfo_internal
.type	updatePoolInfo_internal, @function
CALL $updatePoolInfo_internal_macro$

.macro updatePoolInfo_internal_macro
; function updatePoolInfo
PUSHCONT {
	;; if
	;; push identifier now
	NOW
	;; <=
	;; push identifier lastRewardTime
	GETGLOB 10
	LEQ
	PUSHCONT {
		;; return
		RET
	}
	IFJMP
	;; end if
	;; push identifier lastRewardTime
	GETGLOB 10
	;; push identifier now
	NOW
	CALLREF {
		CALL $getMultiplier_internal_macro$
	}
	;; decl: multiplier
	PUSHINT 0
	NEWDICT
	PAIR
	;; decl: new_reward
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier rewardPerSecond
		GETGLOB 16
		INDEX 0
		LESS
	}
	PUSHCONT {
		; expValue
		PUSH S1
		; end expValue
		;; index
		;; push identifier i
		PUSH S1
		;; push identifier rewardPerSecond
		GETGLOB 16
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		;; *
		;; push identifier multiplier
		PUSH S4
		MUL
		;; array.push(..)
		NEWC
		STU 256
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP S2
		; end colValue
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
	;; if
	;; push identifier tokenBalance
	GETGLOB 15
	PUSHCONT {
		; for
		PUSHINT 0
		;; decl: i
		PUSHCONT {
			;; push identifier i
			DUP
			;; <
			;; get member length
			;; push identifier rewardPerSecond
			GETGLOB 16
			INDEX 0
			LESS
		}
		PUSHCONT {
			;; index
			;; push identifier i
			DUP
			;; push identifier new_reward
			PUSH S2
			INDEX 1
			PUSHINT 32
			DICTUGET
			THROWIFNOT 50
			PLDU 256
			; expValue
			;; fetch unclaimedReward
			GETGLOB 22
			UNPAIR
			;; push identifier i
			PUSH S3
			SWAP
			PUSH2 s1,s2
			LESS
			THROWIFNOT 50
			PUSH2 S1, S0
			PUSHINT 32
			DICTUGET
			THROWIFNOT 50
			PLDU 256
			; end expValue
			BLKSWAP 1, 4
			ADD
			; colValue
			NEWC
			STU 256
			ROTREV
			PUSHINT 32
			DICTUSETB
			PAIR
			SETGLOB 22
			; end colValue
			;; ++
			; expValue
			; end expValue
			INC
			; colValue
			; end colValue
		}
		WHILE
		DROP
		; end for
		; expValue
		; end expValue
		;; push identifier now
		NOW
		; colValue
		SETGLOB 10
		; end colValue
		;; return
		DROP2
		RET
	}
	IFNOTJMP
	;; end if
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier rewardPerSecond
		GETGLOB 16
		INDEX 0
		LESS
	}
	PUSHCONT {
		;; index
		;; push identifier i
		DUP
		;; push identifier new_reward
		PUSH S2
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		;; *
		PUSHINT 1000000000000000000
		MUL
		;; /
		;; push identifier tokenBalance
		GETGLOB 15
		DIV
		; expValue
		;; fetch accTonPerShare
		GETGLOB 17
		UNPAIR
		;; push identifier i
		PUSH S3
		SWAP
		PUSH2 s1,s2
		LESS
		THROWIFNOT 50
		PUSH2 S1, S0
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		PLDU 256
		; end expValue
		BLKSWAP 1, 4
		ADD
		; colValue
		NEWC
		STU 256
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		SETGLOB 17
		; end colValue
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
	; expValue
	; end expValue
	;; push identifier now
	NOW
	; colValue
	SETGLOB 10
	; end colValue
	DROP2
}
CALLX
; end function updatePoolInfo

.globl	deployUserData_internal
.type	deployUserData_internal, @function
CALL $deployUserData_internal_macro$

.macro deployUserData_internal_macro
;; param: _user
; function deployUserData
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier _user
PUSH S1
PUSHINT 2
ROT
PUSHINT 64
DICTUSET
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier userDataCode
GETGLOB 26
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
DUP
HASHCU
;; get member wid
MYADDR
PARSEMSGADDR
INDEX 2
NEWC
STSLICECONST x9_
STI 8
STU 256
ENDC
CTOS
PUSHINT 200000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x3c91e1c5
;; reward_tokens_count
;; get member length
;; push identifier rewardTokenRoot
GETGLOB 18
INDEX 0
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
NIP
NIP
; end function deployUserData
NIP

.macro getUserDataAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _user
LDMSGADDR
ENDS
;; param: _user
CALLREF {
	CALL $getUserDataAddress_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc8359ba4
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getUserDataAddress_internal
.type	getUserDataAddress_internal, @function
CALL $getUserDataAddress_internal_macro$

.macro getUserDataAddress_internal_macro
;; param: _user
; function getUserDataAddress
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier _user
PUSH S1
PUSHINT 2
ROT
PUSHINT 64
DICTUSET
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier userDataCode
GETGLOB 26
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getUserDataAddress
NIP

.macro on_bounce_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
;; param: slice
; function onBounce
ACCEPT
; expValue
DUP
; end expValue
LDU 32
; colValue
POP S2
; end colValue
;; decl: functionId
;; if
;; push identifier functionId
DUP
;; ==
PUSHINT 302517117
EQUAL
PUSHCONT {
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	PUSHINT 2
	RAWRESERVE
	; expValue
	PUSH S1
	; end expValue
	LDU 64
	; colValue
	POP S3
	; end colValue
	;; decl: _deposit_nonce
	;; index
	;; push identifier _deposit_nonce
	DUP
	;; push identifier deposits
	GETGLOB 25
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		LDMSGADDR
		LDU 256
		TUPLE 3
	}
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		TUPLE 3
	}
	IFELSE
	;; decl: deposit
	;; get member user
	;; push identifier deposit
	DUP
	INDEX 0
	CALLREF {
		CALL $deployUserData_internal_macro$
	}
	;; decl: user_data_addr
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; push identifier rewardTokenRoot
		GETGLOB 18
		INDEX 0
		LESS
	}
	PUSHCONT {
		;; Remote call IRootTokenContract.deployEmptyWallet
		;; index
		;; push identifier i
		DUP
		;; push identifier rewardTokenRoot
		GETGLOB 18
		INDEX 1
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHSLICE x41dcd6500000000000000000000000000004_
		STSLICER
		STSLICECONST 0
		STSLICECONST 1
		NEWC
		STSLICECONST x542b1672
		;; deploy_grams
		PUSHINT 100000000
		STUR 128
		;; wallet_public_key
		PUSHINT 0
		STUR 256
		;; owner_address
		;; get member user
		;; push identifier deposit
		PUSH S4
		INDEX 0
		STSLICER
		;; gas_back_address
		;; get member user
		;; push identifier deposit
		PUSH S4
		INDEX 0
		STSLICER
		STBREFR
		ENDC
		PUSHINT 0
		SENDRAWMSG
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
	;; Remote call UserData.processDeposit
	;; push identifier user_data_addr
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x12080b7d
	;; nonce
	;; push identifier _deposit_nonce
	PUSH S3
	STUR 64
	;; _amount
	;; get member amount
	;; push identifier deposit
	PUSH S2
	INDEX 1
	STUR 256
	;; _accTonPerShare
	;; push identifier accTonPerShare
	GETGLOB 17
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 128
	SENDRAWMSG
	BLKDROP 3
}
IF
;; end if
DROP
; end function onBounce
DROP
CALLREF {
	CALL $c7_to_c4$
}

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 17
UNTUPLE 2
GETGLOB 18
UNTUPLE 2
GETGLOB 19
UNTUPLE 2
GETGLOB 20
UNTUPLE 2
REVERSE 12, 0
STU 256
STSLICE
STSLICE
STU 32
STDICT
STU 32
STDICT
STU 32
STDICT
STU 32
STDICT
NEWC
GETGLOB 15
GETGLOB 21
UNTUPLE 2
GETGLOB 23
GETGLOB 27
GETGLOB 22
UNTUPLE 2
GETGLOB 25
REVERSE 9, 0
STU 256
STU 32
STDICT
STSLICE
STSLICE
STU 32
STDICT
STDICT
GETGLOB 10
GETGLOB 11
GETGLOB 24
GETGLOB 28
GETGLOB 16
UNTUPLE 2
GETGLOB 26
REVERSE 10, 0
STBREF
STBREF
STU 256
STU 256
STU 64
STU 64
STU 32
STDICT
STREF
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDU 256
LDMSGADDR
LDMSGADDR
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 17
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 18
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 19
LDU 32
PLDDICT
PAIR
SETGLOB 20
SETGLOB 14
SETGLOB 13
SETGLOB 12
LDREFRTOS
LDU 256
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 21
LDMSGADDR
LDMSGADDR
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 22
PLDDICT
SETGLOB 25
SETGLOB 27
SETGLOB 23
SETGLOB 15
LDU 256
LDU 256
LDU 64
LDU 64
LDU 32
LDDICT
ROTREV
PAIR
SETGLOB 16
PLDREF
SETGLOB 26
SETGLOB 28
SETGLOB 24
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDU 256
	LDMSGADDR
	LDMSGADDR
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 17
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 18
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 19
	LDU 32
	PLDDICT
	PAIR
	SETGLOB 20
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	LDREFRTOS
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 21
	LDMSGADDR
	LDMSGADDR
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 22
	PLDDICT
	SETGLOB 25
	SETGLOB 27
	SETGLOB 23
	SETGLOB 15
	LDU 256
	LDU 256
	LDU 64
	LDU 64
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SETGLOB 16
	PLDREF
	SETGLOB 26
	SETGLOB 28
	SETGLOB 24
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init lastRewardTime
	PUSHINT 0
	SETGLOB 10
	; init farmStartTime
	PUSHINT 0
	SETGLOB 11
	; init farmEndTime
	PUSHINT 0
	SETGLOB 12
	; init tokenRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init tokenWallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init tokenBalance
	PUSHINT 0
	SETGLOB 15
	; init rewardPerSecond
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 16
	; init accTonPerShare
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 17
	; init rewardTokenRoot
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 18
	; init rewardTokenWallet
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 19
	; init rewardTokenBalance
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 20
	; init rewardTokenBalanceCumulative
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 21
	; init unclaimedReward
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 22
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 23
	; init deposit_nonce
	PUSHINT 0
	SETGLOB 24
	; init deposits
	NEWDICT
	SETGLOB 25
	; init userDataCode
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 26
	; init fabric
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 27
	; init deploy_nonce
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 64
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 28
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: deposit_nonce
	PUSHINT 0
	SETGLOB 24
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	CALL $on_bounce_macro$
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro public_function_selector
DUP
PUSHINT 400749881
LEQ
PUSHCONT {
	DUP
	PUSHINT 317981552
	EQUAL
	IFJMPREF {
		CALL $withdrawAll$
	}
	DUP
	PUSHINT 342932036
	EQUAL
	IFJMPREF {
		CALL $finishDeposit$
	}
	DUP
	PUSHINT 394278687
	EQUAL
	IFJMPREF {
		CALL $pendingReward$
	}
	DUP
	PUSHINT 400749881
	EQUAL
	IFJMPREF {
		CALL $withdrawUnclaimed$
	}
}
IFJMP
DUP
PUSHINT 1436663460
LEQ
PUSHCONT {
	DUP
	PUSHINT 592743766
	EQUAL
	IFJMPREF {
		CALL $getDetails$
	}
	DUP
	PUSHINT 1211472804
	EQUAL
	IFJMPREF {
		CALL $getUserDataAddress$
	}
	DUP
	PUSHINT 1354746527
	EQUAL
	IFJMPREF {
		CALL $receiveTokenWalletAddress$
	}
	DUP
	PUSHINT 1436663460
	EQUAL
	IFJMPREF {
		CALL $withdraw$
	}
}
IFJMP
DUP
PUSHINT 2011107298
LEQ
PUSHCONT {
	DUP
	PUSHINT 1497440185
	EQUAL
	IFJMPREF {
		CALL $tokensReceivedCallback$
	}
	DUP
	PUSHINT 1512383416
	EQUAL
	IFJMPREF {
		CALL $getVersion$
	}
	DUP
	PUSHINT 1893052075
	EQUAL
	IFJMPREF {
		CALL $finishSafeWithdraw$
	}
	DUP
	PUSHINT 2011107298
	EQUAL
	IFJMPREF {
		CALL $getMultiplier$
	}
}
IFJMP
DUP
PUSHINT 2087304985
LEQ
PUSHCONT {
	DUP
	PUSHINT 2059220780
	EQUAL
	IFJMPREF {
		CALL $finishWithdraw$
	}
	DUP
	PUSHINT 2068813800
	EQUAL
	IFJMPREF {
		CALL $safeWithdraw$
	}
	DUP
	PUSHINT 2087304985
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
}
IFJMP
